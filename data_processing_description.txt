Here is a very rough description of how I did the Keplerian/Ptolemaic data reduction a few years ago:

(1) Ran 3rdParty/PtolemaicModel/data/getSunPosition.sh to fetch the sun's sky position (from the internet:  theskylive.com) over a certain period of time.
(2) Ran 3rdParty/PtolemaicModel/data/subsetFields.sh on that data from the last step and put it in a data file, maybe 3rdParty/PtolemaicModel/data/sun_ar_dec_may_2016_mar_2020.txt.
(3) Performed a coordinate transformation on the data from the last step, from the Earth's equatorial plane to the Earth's ecliptic plane (in the end with the X axis pointing at the sun at Spring equinox, if I remember correctly, and the Z axis pointing at the "north pole" of the Earth's ecliptic plane), using 3rdParty/PtolemaicModel/data/transform_coords.awk which utilized a basic linear algebra coordinate transformation as described in "Linear Algebra and Its Applications" by David C. Lay.
(4) Verified that the coordinate transformation in the last step came close to zeroing out the declination of the sun position data over its period (deviating by an absolute value of less than a 4/100 degree of declination over all that data); I think that sun data currently resides in 3rdParty/PtolemaicModel/data/sun_ecliptic_pos.txt.
(5)  Ran 3rdParty/PtolemaicModel/data/getMarsPosition.sh to fetch Mar's sky position over a certain period of time (from the internet:  theskylive.com) and put that in a data file, 3rdParty/PtolemaicModel/data/mars_ar_dec_apr_2014_jun_2020.txt.
(6)  Ran PtolemaicModel/data/subsetFieldsMars.sh, modified to use the Mars data from the last step rather than the sun's data.  cat mars_ar_dec_apr_2014_jun_2020.txt | ./subsetFieldsMars.sh | awk '{ printf("%s,%s\n", $7, $8); }' FS=':' - | sed 's:,"dec"::' | awk -f transform_coords.awk FS=',' - ... Put that data in a temporary data file.
(7)  Ran the same coordinate transformation process in 3rdParty/PtolemaicModel/data/transform_coords.awk from step 3 (it had been easier to debug the process using sun data rather than using planetary data, and that's why the sun was done first) on the Mars data from the last step.
(8)  Verified that *most* of the Mars data from the last step had its declination significantly reduced -- deviating an absolute value of less than 8 degrees for all the data and significantly less than that (less than 3 degrees) for most of the data -- that was ultimately my check that the overall planar position of Mars that I'd be using, including the right-ascension (which I call angle "theta" in most of my PtolemaicModel code e.g. in 3rdParty/PtolemaicModel/PtolemaicOrbit.cpp) in that plane, was at least approximately valid.  I believe that data resides in 3rdParty/PtolemaicModel/data/mars_ecliptic_pos.txt.
(9)  Used 3rd party library GAlib, by Matthew Wall, to construct 3rdParty/GAlib/examples/fitPtolemaic.C which was closely based upon the GAlib example program 3rdParty/GAlib/examples/ex22.C, to find epicycle free parameters that fit the data taken from the data in the last step, for one Mars synodic period.  A record of free parameters derived from trials using GAlib is in the file 3rdParty/PtolemaicModel/best_fit_params_so_far.txt.  The free parameter values in the last line of that file were fed as command-line parameters into 3rdParty/PtolemaicModel/PtolemaicInstance.cpp to produce the data in 3rdParty/PtolemaicModel/animatePtolemaic/mars_theta.txt.
(10)  The data, from the last step, in 3rdParty/PtolemaicModel/animatePtolemaic/mars_theta.txt is meant to be browsed and loaded (in a browser allowing Javascript) in 3rdParty/PtolemaicModel/animatePtolemaic/drawPtolemaic.html.

Some code might contain one more epicycle than is actually used by PtolemaicInstance.cpp right now; I was varying the number of epicycles used back-and-forth a bit... if so then I simply ignored the last 3 free parameters.

